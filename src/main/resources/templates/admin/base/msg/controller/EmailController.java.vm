package ${packageName}.controller;
import ${packageName2}.permission.Permission;
import ${packageName2}.entity.WebResponse;
import ${packageName}.entity.Email;
import ${packageName}.vo.EmailVo;
import ${packageName2}.enums.State;
import ${packageName2}.i18n.I18nUtils;
import ${packageName}.service.EmailMessageService;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.google.protobuf.ServiceException;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Api(value = "邮件服务 API")
@RestController
@Permission(path = "/msg/email")
@RequestMapping("/api/msg/email")
public class EmailController {
    private final EmailMessageService emailService;

    public EmailController(EmailMessageService emailService) {
        this.emailService = emailService;
    }

    @ApiOperation("邮件记录列表")
    @ApiImplicitParams(
            {
                    @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
            }
    )
    @PostMapping("/list")
    public WebResponse<List<Email>> list(@RequestBody EmailVo email) throws ServiceException {
        Page<Email> list = emailService.list(email);
        return WebResponse.Page(list.getRecords(), list.getTotal());
    }

    @ApiOperation("邮件信息")
    @ApiImplicitParams(
            {
                    @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header"),
                    @ApiImplicitParam(name = "id", required = true)
            }
    )
    @GetMapping("/info")
    public WebResponse<Email> info(@RequestParam("id") Long id) throws ServiceException {
        Email Email = emailService.getById(id);
        return WebResponse.OK(Email);
    }

    @ApiOperation("修改或保存")
    @Permission(path = "/msg/email", type = Permission.Type.Write)
    @ApiImplicitParams(
            {
                    @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
            }
    )
    @PostMapping("/save")
    public WebResponse<Boolean> save(@RequestBody Email message) throws ServiceException {
        String id = message.getId();
        boolean save;
        if (StringUtils.isNotBlank(id)) {
            save = emailService.update(message);
            return WebResponse.OK(I18nUtils.getMessage(save ? "update.success" : "update.fail"), save);
        } else {
            save = emailService.save(message);
            return WebResponse.OK(I18nUtils.getMessage(save ? "add.success" : "add.fail"), save);
        }
    }

    @ApiOperation("删除")
    @Permission(path = "/msg/email", type = Permission.Type.Write)
    @ApiImplicitParams(
            {
                    @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
            }
    )
    @GetMapping("/delete")
    public WebResponse<Boolean> delete(@RequestParam("id") String id) throws ServiceException {
        Email Email = new Email();
        Email.setId(id);
        Email.setState(State.Delete.getCode());
        boolean delete = emailService.updateById(Email);
        return WebResponse.OK(I18nUtils.getMessage(delete ? "delete.success" : "delete.fail"), delete);
    }
}
