package com.sun.project.controller.sys;


import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.sun.project.api.permission.Permission;
import com.sun.project.api.service.sys.SysRoleResourceService;
import com.sun.project.common.entity.common.WebResponse;
import com.sun.project.common.entity.sys.SysRoleResource;
import com.sun.project.common.i18n.I18nUtils;
import com.sun.project.common.valid.ValidEntity;
import com.sun.project.common.vo.sys.SysRoleResourceVo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.constraints.NotBlank;
import java.util.List;
import java.util.stream.Collectors;

/**
 * <p>
 * 角色资源表 前端控制器
 * </p>
 *
 * @author sun
 * @since 2024-11-12
 */
@Api(tags = "角色资源服务 API")
@RestController
@Permission(path = "/sys/role")
@RequestMapping("/api/sys/role-resource")
public class RoleResourceController {

    @Resource
    private RoleResourceService roleResourceService;

    @ApiOperation("根据角色ID查询权限资源")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
    })
    @GetMapping("/permission")
    public WebResponse<List<String>> getPermissionByRoleId(@RequestParam @NotBlank String roleId) {
        return WebResponse.OK(roleResourceService.getPermissionByRoleId(roleId));
    }

    @ApiOperation("根据角色ID添加或者修改权限资源")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
    })
    @Permission(path = "/sys/role", type = Permission.Type.Write)
    @PostMapping("/save")
    public WebResponse<Boolean> save(@RequestBody
                                     @ValidEntity(fieldNames = {"resourceIds", "roleId"})
                                     SysRoleResourceVo roleResource) {
        List<SysRoleResource> roleResourceList = roleResource.getResourceIds().stream().map(resourceId -> {
            // 删除角色资源
            if (roleResource.getRoleId() != null) {
                roleResourceService.remove(Wrappers.lambdaQuery(SysRoleResource.class)
                        .eq(SysRoleResource::getRoleId, roleResource.getRoleId()));
            }
            // 添加角色资源
            SysRoleResource sysRoleResource = new SysRoleResource();
            sysRoleResource.setRoleId(roleResource.getRoleId());
            sysRoleResource.setResourceId(Integer.valueOf(resourceId));
            return sysRoleResource;
        }).collect(Collectors.toList());
        boolean result = roleResourceService.saveBatch(roleResourceList);
        return WebResponse.OK(result ? I18nUtils.getMessage("system.authorize.success") : I18nUtils.getMessage("system.authorize.fail"));
    }
}
