package com.sun.project.controller.sys;


import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.sun.project.api.permission.Permission;
import com.sun.project.api.service.sys.SysUserService;
import com.sun.project.common.entity.common.WebResponse;
import com.sun.project.common.entity.sys.SysUser;
import com.sun.project.common.enums.common.State;
import com.sun.project.common.exception.ServerException;
import com.sun.project.common.i18n.I18nUtils;
import com.sun.project.common.valid.ValidEntity;
import com.sun.project.common.vo.sys.SysUserVo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.NotBlank;
import java.util.List;
import java.util.stream.Collectors;

@Api(tags = "系统用户服务 API")
@Validated
@RestController
@Permission(path = "/sys/admin")
@RequestMapping("/api/sys/admin")
public class SysUserController {

    private final UserService userService;

    private final PasswordEncoder encoder;


    @Autowired
    public SysUserController(UserService userService, org.springframework.security.crypto.password.PasswordEncoder encoder) {
        this.userService = userService;
        this.encoder = encoder;
    }


    @ApiOperation("管理员列表")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
    })
    @PostMapping("/list")
    public WebResponse<List<SysUserVo>> list(@RequestBody SysUser sysUser) throws ServerException {
        Page<SysUser> userPage = new Page<>(sysUser.getCurrent(), sysUser.getPageSize());
        Wrapper<SysUser> queryWrapper = Wrappers.lambdaQuery(SysUser.class)
                .eq(SysUser::getState, State.Success.getCode())
                .like(StringUtils.isNotBlank(sysUser.getSex()), SysUser::getSex, sysUser.getSex())
                .like(StringUtils.isNotBlank(sysUser.getType()), SysUser::getType, sysUser.getType())
                .like(StringUtils.isNotBlank(sysUser.getUsername()), SysUser::getUsername, sysUser.getUsername())
                .like(StringUtils.isNotBlank(sysUser.getPhone()), SysUser::getPhone, sysUser.getPhone())
                .like(StringUtils.isNotBlank(sysUser.getEmail()), SysUser::getEmail, sysUser.getEmail())
                .orderByDesc(SysUser::getCreateAt);
        Page<SysUser> sysUserPage = userService.page(userPage, queryWrapper);
        List<SysUserVo> userVos = sysUserPage.getRecords().stream().map(user -> {
            SysUserVo userVo = new SysUserVo();
            user.setPassword(null);
            BeanUtils.copyProperties(user, userVo);
            userVo.setRoleIds(userService.getRoleIdsByUserId(user.getId()));
            return userVo;
        }).collect(Collectors.toList());
        return WebResponse.Page(userVos, sysUserPage.getTotal());
    }


    @ApiOperation("管理员详情")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "管理员ID", required = true),
            @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
    })
    @GetMapping("/info")
    public WebResponse<SysUser> detail(@RequestParam @NotBlank String id) throws ServerException {
        SysUser user = userService.getById(id);
        user.setPassword(null);
        SysUserVo userVo = new SysUserVo();
        BeanUtils.copyProperties(user, userVo);
        userVo.setRoleIds(userService.getRoleIdsByUserId(user.getId()));
        return WebResponse.OK(userVo);
    }

    @ApiOperation("管理员保存修改")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
    })
    @Permission(path = "/sys/admin", type = Permission.Type.Write)
    @Transactional(rollbackFor = Exception.class)
    @PostMapping("/save")
    public WebResponse<Boolean> save(@RequestBody
                                     @ValidEntity(fieldNames = {"username", "phone", "email", "avatar"})
                                     SysUserVo sysUser) throws ServerException {
        String id = sysUser.getId();
        // 密码加密
        if (StringUtils.isNotEmpty(sysUser.getPassword())) {
            sysUser.setPassword(encoder.encode(sysUser.getPassword()));
        }
        if (sysUser.getRoleIds() != null) {
            userService.bindRole(sysUser.getId(), sysUser.getRoleIds());
        }
        boolean saved = userService.saveOrUpdate(sysUser);
        if (StringUtils.isEmpty(id)) {
            return WebResponse.OK(saved ? I18nUtils.getMessage("add.success") : I18nUtils.getMessage("add.fail"), true);
        }
        return WebResponse.OK(saved ? I18nUtils.getMessage("update.success") : I18nUtils.getMessage("update.fail"), true);
    }

    @ApiOperation("管理员删除")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "管理员ID", required = true),
            @ApiImplicitParam(name = "Authorization", value = "访问令牌", required = true, dataType = "string", paramType = "header")
    })
    @Permission(path = "/sys/admin", type = Permission.Type.Write)
    @DeleteMapping("/delete")
    public WebResponse<Boolean> delete(@RequestParam @NotBlank String id) throws ServerException {
        boolean update = userService.update(Wrappers.lambdaUpdate(SysUser.class)
                .eq(SysUser::getId, id)
                .set(SysUser::getState, State.Delete.getCode()));
        return WebResponse.OK(update ? I18nUtils.getMessage("delete.success") : I18nUtils.getMessage("delete.fail"), update);
    }

}
