package ${packageName}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${packageName}.mapper.UserMapper;
import ${packageName}.service.*;
import ${packageName}.service.DictService;
import ${packageName2}.entity.Token;
import ${packageName2}.entity.BaseEntity;
import ${packageName2}.msg.entity.Email;
import ${packageName}.entity.*;
import ${packageName2}.enums.State;
import ${packageName2}.enums.EmailType;
import ${packageName2}.enums.ResourceType;
import ${packageName2}.exception.ServerException;
import ${packageName2}.i18n.I18nUtils;
import ${packageName2}.local.CurrentUser;
import ${packageName2}.utils.TokenUtils;
import ${packageName}.vo.ResourceVo;
import ${packageName}.vo.UserVo;
import ${packageName2}.msg.service.EmailMessageService;
import org.apache.commons.lang3.RandomUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.scheduling.annotation.Async;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {


    @Resource
    private UserRoleService userRoleService;


    @Resource
    private RoleResourceService roleResourceService;

    @Resource
    private ResourceService resourceService;

    @Resource
    private DictService dictService;

    @Resource
    private EmailMessageService emailService;

    @Resource
    private TokenService tokenService;

    @Resource
    private BCryptPasswordEncoder encoder;

    @Override
    public Boolean register(UserVo user) throws ServerException {
        String email = user.getEmail();
        String phone = user.getPhone();
        Integer verificationCode = user.getVerificationCode();
        // 检查邮箱和手机号是否已存在
        if(checkEmail(email))
            throw new ServerException(400, I18nUtils.getMessage("user.email.exist"));
        if(checkPhone(phone))
            throw new ServerException(400, I18nUtils.getMessage("user.phone.exist"));
        // 验证码校验
        checkCode(email, verificationCode);
        user.setPassword(encoder.encode(user.getPassword()));
        return save(user);
    }

    private void checkCode(String email, Integer verificationCode) {
        String captcha = dictService.getValue("Captcha");
        // 如果不开启验证码，直接通过
        if (!Boolean.parseBoolean(captcha)) {
            // 验证码校验
            LambdaQueryWrapper<Email> query = Wrappers.lambdaQuery(Email.class);
            query
                    .eq(Email::getEmail, email)
                    .eq(Email::getCode, verificationCode)
                    .eq(Email::getState, State.Success.getCode());
            Email one = emailService.getOne(query);
            if (one == null) {
                throw new ServerException(400, I18nUtils.getMessage("user.captcha.error"));
            } else {
                // 判断是否超过5分钟
                Date now = new Date();
                if (now.getTime() - one.getCreateAt() > 300000) {
                    one.setState(2);
                    emailService.update(one);
                    throw new ServerException(400, I18nUtils.getMessage("user.captcha.expired"));
                }
            }
            one.setState(2);
            emailService.update(one);

        }

    }

    @Override
    public Boolean resetPassword(UserVo user) throws ServerException {
        String password = user.getPassword();
        String oldPassword = user.getOldPassword();
        User dbUser = getOne(Wrappers.lambdaQuery(User.class)
                .eq(User::getId, CurrentUser.getUser().get("userId"))
                .eq(User::getState, State.Success.getCode()));
        if (encoder.matches(oldPassword, dbUser.getPassword())) {
            dbUser.setPassword(encoder.encode(password));
            return updateById(dbUser);
        } else {
            throw new ServerException(400, I18nUtils.getMessage("user.password.error"));
        }
    }

    @Override
    public Boolean verify(UserVo user) throws ServerException {
        String account = user.getAccount();
        String password = user.getPassword();
        // 判断account是否是邮箱
        boolean matches = account.matches("^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$");
        LambdaQueryWrapper<User> query = Wrappers.lambdaQuery(User.class);
        query.eq(User::getState, State.Success.getCode());
        // 邮箱或手机号
        if (matches) {
            query.eq(User::getEmail, account);
            // 检查邮箱
            if(!checkEmail(account))
                throw new ServerException(400, I18nUtils.getMessage("user.email.not.exist"));
        } else {
            query.eq(User::getPhone, account);
            // 检查手机号
            if(!checkPhone(account))
                throw new ServerException(400, I18nUtils.getMessage("user.phone.not.exist"));
        }
        User dbUser = getOne(query);
        if (dbUser != null && !encoder.matches(password, dbUser.getPassword())) {
            throw new ServerException(400, I18nUtils.getMessage("user.password.error"));
        }
        return true;
    }
    /**
     * 检查手机号是否存在
     *
     * @param account 手机号
     * @return  true：存在，false：不存在
     */
    private Boolean checkPhone(String account) throws ServerException {
        User phone = this.getOne(Wrappers.lambdaQuery(User.class)
                .eq(User::getPhone, account)
                .eq(User::getState, State.Success.getCode()));
        return phone != null;
    }
    /**
     * 检查邮箱是否存在
     *
     * @param account 邮箱
     * @return  true：存在，false：不存在
     */
    private Boolean checkEmail(String account) throws ServerException {
        User email = this.getOne(Wrappers.lambdaQuery(User.class)
                .eq(User::getEmail, account)
                .eq(User::getState, State.Success.getCode()));
        return email != null;
    }

    @Transactional(rollbackFor = ServerException.class)
    @Override
    public UserVo login(UserVo user) throws ServerException {
        String email = user.getEmail();
        Integer verificationCode = user.getVerificationCode();
        // 邮箱是否存在
        if(!checkEmail(email))
            throw new ServerException(400, I18nUtils.getMessage("user.email.not.exist"));
        checkCode(email, verificationCode);
        User one = getOne(Wrappers.lambdaQuery(User.class)
                .eq(User::getEmail, email)
                .eq(User::getState, State.Success.getCode()));
        one.setPassword(null);
        BeanUtils.copyProperties(one, user);
        //生成token
        HashMap<String, String> payload = new HashMap<>();
        payload.put("userId", user.getId());
        //角色
        payload.put("role", one.getType());
        Token token = TokenUtils.createToken(payload);
        user.setToken(token.getToken());
        user.setRefreshToken(token.getRefreshToken());
        tokenService.saveOrUpdate(token, Wrappers.lambdaUpdate(Token.class)
                .eq(Token::getUserId, user.getId()));
        return user;

    }

    @Override
    public List<Integer> getRoleIdsByUserId(String userId) {
        List<UserRole> list = userRoleService.list(Wrappers.<UserRole>lambdaQuery()
                .select(UserRole::getRoleId)
                .eq(UserRole::getUserId, userId));
        if (!list.isEmpty()) {
            return list.stream().map(UserRole::getRoleId).collect(Collectors.toList());
        }
        return Collections.emptyList();
    }

    @Override
    public Boolean bindRole(String userId, List<Integer> roleIds) {
        return userRoleService.saveUserRoleIds(userId, roleIds);
    }

    @Override
    public List<ResourceVo> getRouters() {
        List<ResourceVo> routes = new ArrayList<>();
        HashMap<String, String> user = CurrentUser.getUser();
        String userId = user.get("userId");
        if (userId != null) {
            // 1.获取用户角色
            List<UserRole> roles = userRoleService.list(Wrappers.<UserRole>lambdaQuery()
                    .select(UserRole::getRoleId)
                    .eq(UserRole::getState, State.Success.getCode())
                    .eq(UserRole::getUserId, userId));
            if (roles.isEmpty()) {
                return routes;
            }
            // 2.获取角色对应的资源
            List<Integer> roleIds = roles.stream().map(UserRole::getRoleId).collect(Collectors.toList());
            List<RoleResource> resources = roleResourceService.list(Wrappers.<RoleResource>lambdaQuery()
                    .select(RoleResource::getResourceId)
                    .eq(RoleResource::getState, State.Success.getCode())
                    .in(RoleResource::getRoleId, roleIds)
                    .orderByAsc(RoleResource::getSortNum));
            if (resources.isEmpty()) {
                return routes;
            }
            // 3.获取资源
            Set<Integer> resourceIds = resources.stream().map(RoleResource::getResourceId).collect(Collectors.toSet());
            List<ResourceVo> list = resourceService.list(Wrappers.lambdaQuery(com.hy.sys.entity.Resource.class)
                    .eq(com.hy.sys.entity.Resource::getState, State.Success.getCode())
                    .in(com.hy.sys.entity.Resource::getId, resourceIds)
                    .orderByAsc(com.hy.sys.entity.Resource::getSortNum)).stream().map(v -> {
                ResourceVo resourceVo = new ResourceVo();
                BeanUtils.copyProperties(v, resourceVo);
                String lng = I18nUtils.getMessage("lng");
                resourceVo.setTitle(v.getName());
                resourceVo.setName(lng.equals("en_US") ? resourceVo.getName() : resourceVo.getNameCn());
                return resourceVo;
            }).collect(Collectors.toList());
            if (list.isEmpty()) {
                return routes;
            }

            // 5.构建树形结构,使用队列
            Map<String, ResourceVo> map = new HashMap<>();
            list.forEach(v -> map.put(v.getId(), v));
            Queue<ResourceVo> queue = new LinkedList<>(list);
            while (!queue.isEmpty()) {
                ResourceVo poll = queue.poll();
                ResourceVo parent = map.get(poll.getParentId().toString());
                if (parent != null) {
                    if (parent.getChildren() == null) {
                        parent.setChildren(new ArrayList<>());
                    }
                    parent.getChildren().add(poll);
                }
                map.put(poll.getId(), poll);
            }

            // 6.设置权限标识
            Collection<ResourceVo> resourceVos = map.values();
            routes = resourceVos.stream()
                    .filter(item -> item.getType().equals(ResourceType.ROUTE.getCode()))
                    .filter(item -> item.getParentId() == 0)
                    .sorted(Comparator.comparing(BaseEntity::getSortNum))
                    .collect(Collectors.toList());
            Stack<Collection<ResourceVo>> stack = new Stack<>();
            stack.add(routes);
            while (!stack.isEmpty()) {
                Collection<ResourceVo> item = stack.pop();
                item.forEach(v -> {
                    if (v.getChildren() != null) {
                        if (v.getChildren().get(0).getType().equals(ResourceType.PERMISSION.getCode())) {
                            v.setAccess(v.getChildren().stream().map(ResourceVo::getTitle).collect(Collectors.joining(",")));
                            v.setChildren(null);
                        } else
                            stack.add(v.getChildren());
                    }
                });
            }
            return routes;
        }
        return routes;
    }

    @Override
    public UserVo detail() {
        UserVo userVo = new UserVo();
        HashMap<String, String> currentUser = CurrentUser.getUser();
        if (currentUser == null || currentUser.get("userId") == null) {
            return userVo;
        }
        User user = this.getById(currentUser.get("userId"));
        user.setPassword(null);
        BeanUtils.copyProperties(user, userVo);
        List<ResourceVo> routers = this.getRouters();
        HashMap<String, Object> map = new HashMap<>();
        if (!routers.isEmpty()) {
            for (ResourceVo router : routers) {
                if (router.getChildren() != null) {
                    router.getChildren().forEach(child -> {
                        if (child.getAccess() != null) {
                            map.put(child.getPath(), child.getAccess().contains("Write"));
                        }
                    });
                }
            }
        }
        try {
            String token = currentUser.get("token");
            TokenUtils.isExpired(token);
            map.put("/sys", false);
        } catch (Exception e) {
            log.error(e.getMessage());
        }
        userVo.setPermissionMap(map);
        return userVo;
    }

    @Async
    @Override
    public void sendVerificationCode(String email) {
        User user = this.getOne(Wrappers.<User>lambdaQuery()
                .eq(User::getEmail, email)
                .eq(User::getState, State.Success.getCode()));
        if (user == null) {
            throw new ServerException(I18nUtils.getMessage("user.email.not.exist"));
        }
        try {
            Email Email = new Email();
            Email.setEmail(email);
            Email.setCode(RandomUtils.nextInt(100000, 999999));
            Email.setType(EmailType.VERIFICATION_CODE.getCode());
            Dict subject = dictService.getByCode("email_template_login_subject", null);
            Email.setSubject(subject.getName());
            Dict body = dictService.getByCode("email_template_login_content", null);
            Email.setBody(body.getName().replace("${code}", Email.getCode().toString()));
            emailService.send(Email);
        } catch (ServerException e) {
            throw new ServerException(400, e.getMessage());
        }
    }

    @Override
    public boolean logout() {
        return tokenService.update(Wrappers.<Token>lambdaUpdate()
                .eq(Token::getUserId, CurrentUser.getUser().get("userId"))
                .set(Token::getState, State.Delete.getCode()));
    }
}
